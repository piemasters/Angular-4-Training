Update local repo to match server
git reset --hard origin/master

Debugging Angular on Chrome:
https://chrome.google.com/webstore/detail/augury/elgalmkoelokbchhkhacckoklkejnhcd/related

Create new project:
ng new project-name

Run project:
ng-serve

Updating npm:
npm install -g npm

Update angular-cli:
npm uninstall -g angular-cli @angular/cli
npm cache clean
npm install -g @angular/cli

Update Major version of angular-cli:
-----------------------------------------------------------------------
https://github.com/angular/angular-cli/wiki/stories-1.0-update

npm uninstall -g angular-cli          # Remove global package
npm uninstall --save-dev angular-cli  # Remove from package.json
npm uninstall -g @angular/cli         # Remove global package
npm uninstall --save-dev @angular/cli # Remove from package.json

rm -rf node_modules dist # Use rmdir on Windows
rmdir C:\Users\nortondl\AppData\Roaming\npm-cache
rmdir C:\Users\nortondl\AppData\Roaming\npm\node_modules\angular-cli
rmdir C:\Users\nortondl\AppData\Roaming\npm\node_modules\@angular
rmdir C:\Program Files\nodejs\node_modules\angular-cli
rmdir C:\Program Files\nodejs\node_modules\@angular

rm package-lock.json
rmdir node_modules

npm i -g npm npm-check
npm-check -ug #to update globals
npm-check -u #to update locals

npm install

update node/npm

npm install -g @angular/cli@latest    # Global package

npm install
ng init
ng build
ng serve

rm -Rf node_modules/
npm update -D && npm update -S
-----------------------------------------------------------------------

Generate component (while app is running):
ng generate component component-name
or
ng g c component-name
ng g d directive-name

Component selector types:
app-test   = <app-test></app-test>
[app-test] = <div app-servers></div>
.app-test  = <div class="app-test"></div>

Databinding
(event)="function()"
[property]="variable"
[(ngModel)]="variable" // Two way binding

Local reference
<p #variable></p>

String Interpolation
{{ var }}

Create a recipe-list component within the recipes folder without a testing spec
ng g c recipes/recipe-list --spec false

Angular View Encapsulation
Styles only apply to their component, not to the project.
Add the following into the component.ts:
encapsulation: ViewEncapsulation.Emulated - normal
encapsulation: ViewEncapsulation.None - disables view encapsulation
encapsulation: ViewEncapsulation.Native - uses shadowdom where supported

Lifecycle
ngOnChanges - Called after a bound input property changes
ngOnInit - Called once the component is initialized
ngDoCheck - Called during every change detection run
ngAfterContentInit - Called after content (ng-content) has been projected into view
ngAfterContentChecked - Called every time the projected content has been checked
ngAfterViewInit - Called after the component's view (and child views) has been initilised
ngAfterViewChecked - Called every time the view (and child views) have been checked
ngOnDestroy - Called once the component is about to be destroyed

Attribute Directives
Look like a normal HTML attribute (possibly with databinding pr event binding)
Only effrect/change the element they are added to

Structural Directives (begins with a *)
Look like a normal HTML attribute but have a leading * (for desugaring)
Affect a whole area in the DOM (elements get added/removed)

Services
List a service in the providers array to use a new instance of that service.
If you don't list it in the providers array you use the shared instance.
List the service in the app.modules providers array to ensure the same
instance is used throughout the app unless it is overridden.
Add @Injectable() into a service you want to inject another service into.

Observable:
Various data sources
User input events, http requests, triggered in code...
Observer:
Handle data, errors or completion
Observables: Learn more at RxJS

Pipes
ng g p pipename

Ahead of time compilation:
ng build --prod --aot

Change base ref for build
ng build --prod --aot --base-href /my-app/
